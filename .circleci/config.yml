# Python CircleCI 2.0 configuration file
##
# Check https://circleci.com/docs/2.0/language-python/ for more details

version: 2
jobs:
  # test:
  build:
    docker:
      - image: openmcworkshop/paramak:dependences_with_neutronics
    steps:
      - checkout
      - run:
          name: install
          command: |
            pip install -r requirements.txt  # this includes optional packages
            python setup.py install  # this dosen't support the optional packages like pip install .[neutronics] does

      - run:
          name: run neutronics_utils tests
          command: 
            pytest tests/test_neutronics_utils.py -v --cov=paramak --cov-report term --cov-report xml --junitxml=test-reports/junit.xml

      - run:
          name: run utils tests
          command: 
            pytest tests/test_utils.py -v --cov=paramak --cov-append --cov-report term --cov-report xml --junitxml=test-reports/junit.xml

      - run:
          name: run shape tests
          command: 
            pytest tests/test_Shape.py -v --cov=paramak --cov-append --cov-report term --cov-report xml --junitxml=test-reports/junit.xml

      - run:
          name: run Reactor tests
          command: 
            pytest tests/test_Reactor.py -v --cov=paramak --cov-append --cov-report term --cov-report xml --junitxml=test-reports/junit.xml

      - run:
          name: run parametric_shapes tests
          command: 
            pytest tests/test_parametric_shapes/ -v --cov=paramak --cov-append --cov-report term --cov-report xml --junitxml=test-reports/junit.xml

      - run:
          name: run parametric_components tests
          command: 
            pytest tests/test_parametric_components/ -v --cov=paramak --cov-append --cov-report term --cov-report xml --junitxml=test-reports/junit.xml

      - run:
          name: run parametric_reactors tests
          command: 
            pytest tests/test_parametric_reactors/ -v --cov=paramak --cov-append --cov-report term --cov-report xml --junitxml=test-reports/junit.xml

      - run:
          name: run neutronics tests
          command: 
            pytest tests/test_parametric_neutronics/ -v --cov=paramak --cov-append --cov-report term --cov-report xml --junitxml=test-reports/junit.xml

      - run:
          name: run example shape tests
          command: 
            pytest tests/test_example_shapes.py -v --cov=paramak --cov-append --cov-report term --cov-report xml --junitxml=test-reports/junit.xml

      - run:
          name: run example component tests
          command: 
            pytest tests/test_example_components.py -v --cov=paramak --cov-append --cov-report term --cov-report xml --junitxml=test-reports/junit.xml

      - run:
          name: run example reactor tests
          command: 
            pytest tests/test_example_reactors.py -v --cov=paramak --cov-append --cov-report term --cov-report xml --junitxml=test-reports/junit.xml

      - store_test_results:
          path: test-reports

      - run: bash <(curl -s https://codecov.io/bash)
  # the following jobs fail on the publish to Dockerhub step. This may be due to a bad authentification
  # build-deploy-master:
  #   environment:
  #     IMAGE_NAME: openmcworkshop/paramak
  #   docker:
  #     - image: circleci/buildpack-deps:stretch
  #       auth:
  #         username: $DOCKERHUB_USERNAME
  #         password: $DOCKERHUB_TOKEN
  #   steps:
  #     - checkout
  #     - setup_remote_docker
  #     - run:
  #         name: Build Docker image
  #         command: docker build -t $IMAGE_NAME .
  #     - run:
  #         name: Publish Docker Image to Docker Hub
  #         command: |
  #           docker login
  #           docker push $IMAGE_NAME
  # build-deploy-dev:
  #   environment:
  #     IMAGE_NAME: openmcworkshop/paramak
  #   docker:
  #     - image: circleci/buildpack-deps:stretch
  #       auth:
  #         username: $DOCKERHUB_USERNAME
  #         password: $DOCKERHUB_TOKEN
  #   steps:
  #     - checkout
  #     - setup_remote_docker
  #     - run:
  #         name: Build Docker image
  #         command: docker build -t $IMAGE_NAME:dev .
  #     - run:
  #         name: Publish Docker Image to Docker Hub
  #         command: |
  #           docker push $IMAGE_NAME:dev

workflows:
  version: 2
  test-build-deploy:
    jobs:
      - build
      # - test
      # - build-deploy-master:
      #     requires:
      #       - test
      #     filters:
      #       branches:
      #         only: master
      # - build-deploy-dev:
      #     requires:
      #       - test
      #     filters:
      #       branches:
      #         only: develop
